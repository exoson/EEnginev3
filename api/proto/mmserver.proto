syntax = 'proto3';

package mmserver;

option go_package = "github.com/exoson/EEnginev3/api/proto/mmserver";
import "google/api/annotations.proto";

message Server {
  string ip = 1;
  string match_password = 2;
}

message Player {
  string id = 1;
  string name = 2;
  string password = 3;
  int64 elo = 4;
}

message MatchResult {
  string match_id = 1;
  string result = 2;
}

message Match {
  string id = 1;
  Server server = 2;
  repeated Player players = 3;
}

message CreateAccountRequest {
  Player player = 1;
}

message CreateAccountResponse {
  string result = 1;
}

message UpdateAccountRequest {
  Player player = 1;
  string new_password = 2;
}

message UpdateAccountResponse {
  string result = 1;
}

message QueueRequest {
  Player player = 1;
}
message QueueResponse {
  Server server = 1;
}

message PollForMatchRequest {
  string server_secret = 1;
}

message PollForMatchResponse {
  Match match = 1;
}

message MatchResultRequest {
  string server_secret = 1;
  MatchResult result = 2;
}

message MatchResultResponse {
  string result = 1;
}

message ListPlayersRequest {

}

message ListPlayersResponse {
  repeated Player players = 1;
}

service MatchMaking {

  // Create a new account. Player object must have name and password set.
  rpc CreateAccount(CreateAccountRequest) returns (CreateAccountResponse) {
    option (google.api.http) = {
      post: "/v1/account"
      body: "*"
    };
  }

  // Update account password. Player object must have name and password set.
  rpc UpdateAccount(UpdateAccountRequest) returns (UpdateAccountResponse) {
    option (google.api.http) = {
      put: "/v1/account"
      body: "*"
    };
  }

  // Queue up for a game. Player object must have name and password set.
  rpc Queue(QueueRequest) returns (QueueResponse) {}

  // Way for gameservers to poll for matches.
  rpc PollForMatch(PollForMatchRequest) returns (PollForMatchResponse) {}

  // Update match with the final result.
  rpc MatchResult(MatchResultRequest) returns (MatchResultResponse) {}

  // List top players sorted by elo
  rpc ListPlayers(ListPlayersRequest) returns (ListPlayersResponse) {
    option (google.api.http) = {
      get: "/v1/account"
    };
  }
}
